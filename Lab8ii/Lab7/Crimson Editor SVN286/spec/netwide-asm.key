[-COMMENT-:GLOBAL]
# NASM-format Assembly Language Keywords File for Crimson Editor
# by Jed Smith <jed@knows.it>
#
# Although NASM is case-insensitive when it comes to predefined keywords
# and directives (user-defined stuff is cAsE-sEnSiTiVe), I stick with
# the way it's written in nasmdoc.txt (or how I code it personally.)
#
# KW0: Intel x86 Instruction Set (hardwired condition codes - CMOVZ et.al.)
# KW1: Intel x86 Registers (Newer registers like MXCSR aren't recognized)
# KW2: Everything else. If you don't like it, I put two line breaks where
#      I had them split up before, but there was too many colors.

[KEYWORDS0:GLOBAL]
AAA AAS AAM AAD ADC ADD AND ARPL BOUND BSF BSR BSWAP BT BTC BTR BTS CALL
CBW CWD CDQ CWDE CLC CLD CLI CLTS CMC CMOVO CMOVB CMOVC CMOVNAE CMOVAE
CMOVNB CMOVNC CMOVE CMOVZ CMOVNE CMOVNZ CMOVBE CMOVNA CMOVA CMOVNBE CMOVS
CMOVNS CMOVP CMOVPE CMOVNP CMOVPO CMOVL CMOVNGE CMOVGE CMOVNL CMOVLE
CMOVNG CMOVG CMOVNLE CMP CMPSB CMPSW CMPSD CMPXCHG CMPXCHG486 CMPXCHG8B
CPUID DAA DAS DEC DIV EMMS ENTER F2XM1 FABS FADD FADDP FBLD FBSTP FCHS
FCLEX FNCLEX  FCMOVO FCMOVB FCMOVC FCMOVNAE FCMOVAE FCMOVNB FCMOVNC
FCMOVE FCMOVZ FCMOVNE FCMOVNZ FCMOVBE FCMOVNA FCMOVA FCMOVNBE FCMOVS
FCMOVNS FCMOVP FCMOVPE FCMOVNP FCMOVPO FCMOVL FCMOVNGE FCMOVGE FCMOVNL
FCMOVLE FCMOVNG FCMOVG FCMOVNLE FCOM FCOMP FCOMPP FCOMI FCOMIP FCOS
FDECSTP FDISI FNDISI FENI FNENI FDIV FDIVP FDIVR FDIVRP FFREE FIADD
FICOM FICOMP FIDIV FIDIVR FILD FIST FISTP FIMUL FINCSTP FINIT FNINIT
FISUB FISUBR FLD FLD1 FLDL2E FLDL2T FLDLG2 FLDLN2 FLDPI FLDZ FLDCW
FLDENV FMUL FMULP FPATAN FPTAN FPREM FPREM1 FRNDINT FSAVE FNSAVE FRSTOR
FSCALE FSETPM FSIN FSINCOS FSQRT FST FSTP FSTCW FNSTCW FSTENV FNSTENV
FSTSW FNSTSW FSUB FSUBP FSUBR FSUBRP FTST FUCOM FUCOMP FUCOMPP FUCOMI
FUCOMIP FXAM FXCH FXTRACT FYL2X FYL2XP1 HLT IBTS IDIV IMUL IN INC INSB
INSW INSD INT INT1 ICEBP INT01 INT3 INTO INVD INVLPG IRET IRETW IRETD
JCXZ JECXZ JMP JO JB JC JNAE JAE JNB JNC JE JZ JNE JNZ JBE JNA JA JNBE
JS JNS JP JPE JNP JPO JL JNGE JGE JNL JLE JNG JG JNLE LAHF LAR LDS LES
LFS LGS LSS LEA LEAVE LGDT LIDT LLDT LMSW LOADALL LOADALL286 LODSB LODSW
LODSD LOOP LOOPE LOOPZ LOOPNE LOOPNZ LSL LTR MOV MOVD MOVQ MOVSB MOVSW
MOVSD MOVSX MOVZX MUL NEG NOT NOP OR OUT OUTSB OUTSW OUTSD PACKSSDW
PACKSSWB PACKUSWB PADDB PADDW PADDD PADDSB PADDSW PADDUSB PADDUSW PADDSIW
PAND PANDN PAVEB PCMPEQB PCMPEQW PCMPEQD PCMPGTB PCMPGTW PCMPGTD PDISTIB
PMACHRIW PMADDWD PMAGW PMULHRW PMULHRIW PMULHW PMULLW PMVZB PMVNZB PMVLZB
PMVGEZB POP POPA POPAW POPAD POPF POPFW POPFD POR PSSLW PSLLD PSLLQ PSRAW
PSRAD PSRLW PSRLD PSRLQ PSUBB PSUBW PSUBD PSUBSB PSUBSW PSUBUSB PSUBUSW
PSUBSIW PUNPCKHBW PUNPCKHWD PUNPCKHWD PUNPCKHDQ PUNPCKLBW PUNPCKLWD
PUNPCKLDQ PUSH PUSHA PUSHAD PUSHAW PUSHF PUSHFD PUSHFW PXOR RCL RCR RDMSR
RDPMC RDTSC RET RETF RETN ROL ROR RSM SAHF SAL SAR SALC SBB SCASB SCASW
SCASD SET!! SGDT SIDT SLDT SHL SHR SHLD SHRD SMI SMSW STC STD STI STOSB
STOSW STOSD STR SUB TEST UMOV VERR VERW WAIT WBINVD WRMSR XADD XBTS XCHG
XLATB XOR

[KEYWORDS1:GLOBAL]
eax ax ah al ebx bx bh bl ecx cx ch cl edx dx dh dl
cs ds es fs gs ss
eip ip esp sp ebp bp esi si edi eflags flags
cr0 cr2 cr3 cr4 gdtr ldtr idtr
st0 st1 st2 st3 st4 st5 st6 st7
mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7
dr0 dr1 dr2 dr3 dr6 dr7
tr3 tr4 tr5 tr6 tr7

[KEYWORDS2:GLOBAL]
LOCK REP REPE REPZ REPNE REPNZ A16 A32 O16 O32 DWORD QWORD TWORD
DB DW DD DQ DT RESB RESW RESD RESQ REST INCBIN EQU TIMES

BITS SECTION SEGMENT ABSOLUTE EXTERN GLOBAL COMMON

%define %idefine %undef %assign %macro %endmacro %rotate
%if %elif %else %endif %ifdef %elifde %ifndef %elifndef
%ifctx %elifctx %ifnctx %elifnctx %ifidn %ifidni %elifidn
%ifnidn %elifnidn %elifidni %ifnidni %elifnidni %ifid %ifnum
%ifstr %elifid %elifnum %elifstr %ifnid %ifnnum %ifnstr
%elifnid %elifnnum %elifnstr %error %rep %endrep %exitrep
%include %push %pop %repl %clear

__NASM_MAJOR__ __NASM_MINOR__ __FILE__ __LINE__ STRUC ISTRUC
AT IEND ALIGN ALIGNB __SECT__ ENDSTRUC

.text .data .bss ORG ALIGN SEG WRT PRIVATE PUBLIC COMMON STACK CLASS
OVERLAY USE16 USE32 FLAT GROUP UPPERCASE IMPORT EXPORT resident nodata
parm ..start NEAR FAR code text data bss info alloc noalloc exec noexec
write nowrite progbits nobits ..gotpc ..gotoff ..got ..plt ..sym
:function :data LIBRARY
